<?php
namespace Syntro\SilverShare\Extension;

use SilverStripe\ORM\DataExtension;
use SilverStripe\SiteConfig\SiteConfig;
use SilverStripe\CMS\Model\SiteTree;
use Syntro\SilverShare\Interfaces\SharingMetaSource;

/**
 * The MetadataPageExtension applies the necessary functionality
 * to the Page object to add the necessary sharing tags to the rendered HTML
 *
 * This Extension must be applied to SiteTree
 *
 * @author Matthias Leutenegger <hello@syntro.ch>
 */
class ShareMetadataPageExtension extends DataExtension
{
    const DEFAULT_OGTYPE = 'website';
    const DEFAULT_TWITTERTYPE = 'summary';

    protected $source = null;

    /**
     * getSource - returns the source for the sharing metadata.
     *
     * @return SiteTree|SharingMetaSource
     */
    public function getSharingSource()
    {
        if ($this->source) {
            return $this->source;
        } else {
            $owner = $this->getOwner();
            $this->setSharingSource($owner);
            return $owner;
        }
    }

    /**
     * setSource - Allows to set the current source for the sharing metadata.
     * This can be another page or a dataobject implementing the correct
     * getters
     *
     * @param  SiteTree|SharingMetaSource $source the object that provides the metadata
     * @return void
     */
    public function setSharingSource($source)
    {
        $this->source = $source;
    }

    /**
     * MetaComponents - extend the tags generated by the CMS by the necessary
     * tags for a clean preview when sharing
     *
     * @param  array $tags the original tags
     * @return void
     */
    public function MetaComponents(&$tags)
    {
        $owner = $this->getOwner();

        $sharingTags = [];
        // add the pagewide tags:
        $sharingTags['og:name'] = $this->provideNameTag();
        $sharingTags['twitter:site'] = $this->provideTwitterSiteTag();

        // add type tags
        $sharingTags['og:type'] = $this->provideOGTypeTag();
        $sharingTags['twitter:card'] = $this->provideTwitterTypeTag();

        // add the image tags
        $imageTags = $this->provideImageTags();
        $sharingTags = array_merge($sharingTags, $imageTags);

        // add the title and description tags
        $sharingTags['og:title'] = $this->provideOGTitleTag();
        $sharingTags['og:description'] = $this->provideOGDescriptionTag();

        // add the url tag
        $sharingTags['og:url'] = $this->provideOGURLTag();

        $sharingTags = array_filter($sharingTags);
        $tags = array_merge($tags, $sharingTags);
    }

    /**
     * provideNameTag - returns the OG Name tag if applicable
     *
     * @return array|null
     */
    public function provideNameTag()
    {
        $pageName = SiteConfig::current_site_config()->Title;
        if ($pageName) {
            return $this->createMetaTag('og:name', $pageName);
        }
        return null;
    }

    /**
     * provideTwitterSiteTag - returns the twitter site tag if applicable
     *
     * @return array|null
     */
    public function provideTwitterSiteTag()
    {
        $twitterPage = SiteConfig::current_site_config()->TwitterSite;
        if ($twitterPage) {
            return $this->createMetaTag('twitter:site', $twitterPage, 'name');
        }
        return null;
    }

    /**
     * provideOGTypeTag - returns the OG type tag
     *
     * @return array
     */
    public function provideOGTypeTag()
    {
        $source = $this->getSharingSource();
        $ogType = $source->sharedOGType() ? $source->sharedOGType() : self::DEFAULT_OGTYPE;
        return $this->createMetaTag('og:type', $ogType);
    }

    /**
     * provideTwitterTypeTag - returns the twitter type tag
     *
     * @return array
     */
    public function provideTwitterTypeTag()
    {
        $source = $this->getSharingSource();
        $twType = $source->sharedTwitterType() ? $source->sharedTwitterType() : self::DEFAULT_TWITTERTYPE;
        return $this->createMetaTag('twitter:card', $twType, 'name');
    }

    /**
     * provideImageTags - returns the images tags if applicable
     *
     * @return array
     */
    public function provideImageTags()
    {
        $source = $this->getSharingSource();
        $image = $source->sharedImage();
        if (!$image || $image->ID == 0) {
            $image = SiteConfig::current_site_config()->OGDefaultImage;
        }
        $tags = [];
        if ($image && $image->ID != 0) {
            $tags['og:image'] = $this->createMetaTag('og:image', $image->getAbsoluteURL());
            $tags['og:image:width'] = $this->createMetaTag('og:image:width', $image->getWidth());
            $tags['og:image:heigth'] = $this->createMetaTag('og:image:heigth', $image->getHeight());
            $tags['og:image:alt'] = $this->createMetaTag('og:image:alt', $image->getTitle());
        }
        return $tags;
    }

    /**
     * provideOGTitleTag - returns the title tag if applicable
     *
     * @return array|null
     */
    public function provideOGTitleTag()
    {
        $source = $this->getSharingSource();
        $ogTitle = $source->sharedOGTitle();
        return $ogTitle ? $this->createMetaTag('og:title', $ogTitle) : null;
    }

    /**
     * provideOGDescriptionTag - returns the description tag if applicable
     *
     * @return array|null
     */
    public function provideOGDescriptionTag()
    {
        $source = $this->getSharingSource();
        $ogDescription = $source->sharedOGDescription();
        return $ogDescription ? $this->createMetaTag('og:description', $ogDescription) : null;
    }

    /**
     * provideOGURLTag - returns the url tag if applicable
     *
     * @return array|null
     */
    public function provideOGURLTag()
    {
        $source = $this->getSharingSource();
        $url = $source->sharedURL();
        return $url ? $this->createMetaTag('og:url', $url) : null;
    }


    /**
     * createMetaTag - creates a tag to feed to the HTML::createTag function
     *
     * @param  string $property the property
     * @param  string $content  the content field of the tag (not the content of the tag!)
     * @param  string $propKey  = 'property' the name of the field holding the property
     * @return array
     */
    public function createMetaTag($property, $content, $propKey = 'property')
    {
        return [
            'tag' => 'meta',
            'attributes' => [
                $propKey => $property,
                'content' => $content
            ],
            'content' => null
        ];
    }
}
